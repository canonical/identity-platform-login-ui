version: '3.7'
services:
  kratos-migrate:
    image: ghcr.io/canonical/kratos:1.1.0
    environment:
      - DSN=postgres://kratos:kratos@postgres/kratos?sslmode=disable
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./docker/kratos
        target: /etc/config/kratos
    command: exec kratos -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet
  kratos:
    depends_on:
      - kratos-migrate
    image: ghcr.io/canonical/kratos:1.1.0
    container_name: kratos
    ports:
      - '4433:4433' # public
      - '4434:4434' # admin
    restart: unless-stopped
    environment:
      - DSN=postgres://kratos:kratos@postgres/kratos?sslmode=disable
      - LOG_LEVEL=trace
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID=${CLIENT_ID}
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET=${CLIENT_SECRET}
    command: exec kratos serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./docker/kratos
        target: /etc/config/kratos
    networks:
      - intranet
  kratos-setup:
    image: ghcr.io/canonical/kratos:1.1.0
    depends_on:
      - kratos
    restart: "no"
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./docker/kratos
        target: /etc/config/kratos
    command: exec kratos import identities /etc/config/kratos/identity.json --endpoint http://kratos:4434
    networks:
      - intranet
  hydra:
    image: ghcr.io/canonical/hydra:2.2.0-canonical
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
    command: exec hydra serve -c /etc/config/hydra/hydra.yml all --dev
    volumes:
      - type: bind
        source: ./docker/hydra
        target: /etc/config/hydra
    environment:
      - DSN=postgres://hydra:hydra@postgres/hydra?sslmode=disable
      - CORS_DEBUG=1
    restart: unless-stopped
    depends_on:
      - hydra-migrate
    networks:
      - intranet
  hydra-migrate:
    image: ghcr.io/canonical/hydra:2.2.0-canonical
    environment:
      - DSN=postgres://hydra:hydra@postgres/hydra?sslmode=disable
    command: exec hydra migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - type: bind
        source: ./docker/hydra
        target: /etc/config/hydra
    restart: on-failure
    networks:
      - intranet
  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - '4436:4436'
      - '4437:4437'
    networks:
      - intranet
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./docker/postgres/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    environment:
      POSTGRES_USER: openfga
      POSTGRES_PASSWORD: openfga
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U openfga" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - intranet
  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.7.1
    command: --config /oauth2-proxy.cfg
    volumes:
      # - "./oauth2-proxy.cfg:/oauth2-proxy.cfg"
      - "./oauth2-proxy-traefik.cfg:/oauth2-proxy.cfg"
    restart: unless-stopped
    ports:
      - 4180:4180/tcp
    networks:
      - intranet
    depends_on:
      - httpbin
      - kratos
      - hydra
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth2-proxy.rule=Host(`oauth2-proxy`)"
      - "traefik.http.routers.oauth2-proxy.entrypoints=web"
      - "traefik.http.routers.oauth2-proxy.service=oauth2-proxy"
      - "traefik.http.services.oauth2-proxy.loadbalancer.server.port=4180"
      # - "traefik.http.middlewares.oauth2-proxy.forwardauth.address=http://oauth2-proxy:4180/oauth2/auth"
      - "traefik.http.middlewares.oauth2-proxy.forwardauth.address=http://oauth2-proxy:4180"
      - "traefik.http.middlewares.oauth2-proxy.forwardauth.authResponseHeaders=X-Forwarded-User,X-Forwarded-Groups"
      # - "traefik.http.middlewares.oauth2-proxy.headers.accessControlAllowHeaders=*"
      # - "traefik.http.middlewares.oauth2-proxy.forwardedHeaders.insecure=true" 
      # - "traefik.http.middlewares.auth.headers.customrequestheaders.X-Forwarded-Proto=https"

  httpbin:
    image: "kennethreitz/httpbin"
    networks:
      - intranet
    labels:
      - "traefik.enable=true"
      # App settings
      - "traefik.http.routers.httpbin.rule=Host(`localhost`)"
      - "traefik.http.routers.httpbin.entrypoints=web"
      - "traefik.http.routers.httpbin.service=httpbin"
      - "traefik.http.services.httpbin.loadbalancer.server.port=80"
      # Attach to the middleware defined in oauth2-proxy
      - "traefik.http.routers.httpbin.middlewares=oauth2-proxy@docker"
  traefik:
    image: "traefik:v2.9.6" # same image as in traefik-k8s charm
    container_name: "traefik"
    networks:
      - intranet
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "8080:80"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

networks:
  intranet:
volumes:
  kratos-sqlite:
